name: Deploy to GCP

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: one-event-production
  REGION: asia-southeast1
  REPOSITORY: one-event-repo

jobs:
  # Job 1: Test และ Build
  test-and-build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            one-event-be/package-lock.json
            one-event-fe/package-lock.json

      - name: Check for changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            backend:
              - 'one-event-be/**'
            frontend:
              - 'one-event-fe/**'

      - name: Install dependencies - Backend
        if: (matrix.service == 'backend' && steps.changes.outputs.backend == 'true') || github.event_name == 'push'
        run: |
          cd one-event-be
          npm ci

      - name: Install dependencies - Frontend
        if: (matrix.service == 'frontend' && steps.changes.outputs.frontend == 'true') || github.event_name == 'push'
        run: |
          cd one-event-fe
          npm ci

      - name: Run tests - Backend
        if: (matrix.service == 'backend' && steps.changes.outputs.backend == 'true') || github.event_name == 'push'
        run: |
          cd one-event-be
          npm run test || echo "Tests skipped - no test script"

      - name: Run tests - Frontend
        if: (matrix.service == 'frontend' && steps.changes.outputs.frontend == 'true') || github.event_name == 'push'
        run: |
          cd one-event-fe
          npm run test || echo "Tests skipped - no test script"

      - name: Run linting - Backend
        if: (matrix.service == 'backend' && steps.changes.outputs.backend == 'true') || github.event_name == 'push'
        run: |
          cd one-event-be
          npm run lint || echo "Linting skipped"

      - name: Run linting - Frontend
        if: (matrix.service == 'frontend' && steps.changes.outputs.frontend == 'true') || github.event_name == 'push'
        run: |
          cd one-event-fe
          npm run lint || echo "Linting skipped"

      - name: Build application - Backend
        if: (matrix.service == 'backend' && steps.changes.outputs.backend == 'true') || github.event_name == 'push'
        run: |
          cd one-event-be
          npm run build

      - name: Build application - Frontend
        if: (matrix.service == 'frontend' && steps.changes.outputs.frontend == 'true') || github.event_name == 'push'
        run: |
          cd one-event-fe
          npm run build

  # Job 2: Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          cd one-event-be && npm audit --audit-level=high
          cd ../one-event-fe && npm audit --audit-level=high

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'

  # Job 3: Build และ Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Set environment suffix
        id: env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "suffix=prod" >> $GITHUB_OUTPUT
          else
            echo "suffix=dev" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        run: |
          if [ "${{ matrix.service }}" = "backend" ]; then
            cd one-event-be
          else
            cd one-event-fe
          fi
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/one-event-${{ matrix.service }}:${{ github.sha }} .
          docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/one-event-${{ matrix.service }}:${{ github.sha }} \
                     ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/one-event-${{ matrix.service }}:${{ steps.env.outputs.suffix }}-latest

      - name: Push Docker image
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/one-event-${{ matrix.service }}:${{ github.sha }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/one-event-${{ matrix.service }}:${{ steps.env.outputs.suffix }}-latest

  # Job 4: Deploy to Cloud Run
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Set environment variables
        id: env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "suffix=prod" >> $GITHUB_OUTPUT
            echo "min_instances=1" >> $GITHUB_OUTPUT
            echo "max_instances=10" >> $GITHUB_OUTPUT
          else
            echo "suffix=dev" >> $GITHUB_OUTPUT
            echo "min_instances=0" >> $GITHUB_OUTPUT
            echo "max_instances=5" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Cloud Run
        run: |
          if [ "${{ matrix.service }}" = "backend" ]; then
            gcloud run deploy one-event-api-${{ steps.env.outputs.suffix }} \
              --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/one-event-backend:${{ github.sha }} \
              --region=${{ env.REGION }} \
              --platform=managed \
              --allow-unauthenticated \
              --min-instances=${{ steps.env.outputs.min_instances }} \
              --max-instances=${{ steps.env.outputs.max_instances }} \
              --memory=1Gi \
              --cpu=1 \
              --timeout=300 \
              --set-env-vars="NODE_ENV=${{ steps.env.outputs.suffix == 'prod' && 'production' || 'development' }}" \
              --set-secrets="DATABASE_URL=one-event-db-url-${{ steps.env.outputs.suffix }}:latest,JWT_SECRET=one-event-jwt-secret-${{ steps.env.outputs.suffix }}:latest"
          else
            gcloud run deploy one-event-web-${{ steps.env.outputs.suffix }} \
              --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/one-event-frontend:${{ github.sha }} \
              --region=${{ env.REGION }} \
              --platform=managed \
              --allow-unauthenticated \
              --min-instances=${{ steps.env.outputs.min_instances }} \
              --max-instances=${{ steps.env.outputs.max_instances }} \
              --memory=512Mi \
              --cpu=1 \
              --port=80
          fi

  # Job 5: Run Database Migrations (Backend only)
  migrate-database:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Set environment suffix
        id: env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "suffix=prod" >> $GITHUB_OUTPUT
          else
            echo "suffix=dev" >> $GITHUB_OUTPUT
          fi

      - name: Run database migrations
        run: |
          gcloud run jobs create one-event-migrate-${{ steps.env.outputs.suffix }}-${{ github.run_number }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/one-event-backend:${{ github.sha }} \
            --region=${{ env.REGION }} \
            --task-timeout=600 \
            --memory=1Gi \
            --cpu=1 \
            --set-secrets="DATABASE_URL=one-event-db-url-${{ steps.env.outputs.suffix }}:latest" \
            --command="npm" \
            --args="run,migration:run"
          
          gcloud run jobs execute one-event-migrate-${{ steps.env.outputs.suffix }}-${{ github.run_number }} \
            --region=${{ env.REGION }} \
            --wait

  # Job 6: Smoke Tests
  smoke-tests:
    runs-on: ubuntu-latest
    needs: [deploy, migrate-database]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Set environment suffix
        id: env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "suffix=prod" >> $GITHUB_OUTPUT
          else
            echo "suffix=dev" >> $GITHUB_OUTPUT
          fi

      - name: Wait for deployment
        run: sleep 30

      - name: Health check - Backend
        run: |
          BACKEND_URL=$(gcloud run services describe one-event-api-${{ steps.env.outputs.suffix }} --region=${{ env.REGION }} --format="value(status.url)")
          curl -f $BACKEND_URL/health || exit 1

      - name: Health check - Frontend
        run: |
          FRONTEND_URL=$(gcloud run services describe one-event-web-${{ steps.env.outputs.suffix }} --region=${{ env.REGION }} --format="value(status.url)")
          curl -f $FRONTEND_URL/health || exit 1

      - name: Basic API test
        run: |
          BACKEND_URL=$(gcloud run services describe one-event-api-${{ steps.env.outputs.suffix }} --region=${{ env.REGION }} --format="value(status.url)")
          curl -f $BACKEND_URL/api || exit 1
