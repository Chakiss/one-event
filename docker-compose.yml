version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: one-event-postgres
    environment:
      POSTGRES_DB: one_event_development
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - one-event-network

  # Backend API
  backend:
    build:
      context: ./one-event-be
      dockerfile: Dockerfile
    container_name: one-event-backend
    environment:
      NODE_ENV: development
      PORT: 8000
      DATABASE_URL: postgresql://postgres:password@postgres:5432/one_event_development
      JWT_SECRET: development-jwt-secret-key-for-local-testing-only
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_SECURE: false
      EMAIL_USER: ""
      EMAIL_PASS: ""
      EMAIL_FROM: OneEvent <noreply@oneevent.local>
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - one-event-network
    volumes:
      - ./one-event-be:/app
      - /app/node_modules
    command: ["npm", "run", "start:dev"]

  # Frontend Web
  frontend:
    build:
      context: ./one-event-fe
      dockerfile: Dockerfile.dev
    container_name: one-event-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - one-event-network
    volumes:
      - ./one-event-fe:/app
      - /app/node_modules
      - /app/.next
    command: ["npm", "run", "dev"]

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: one-event-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - one-event-network
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  one-event-network:
    driver: bridge
